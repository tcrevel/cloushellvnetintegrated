{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "displayName": "Location",
        "description": "Location for all resources."
      }
    },
    "AzureAdTenant": {
      "type": "string",
      "metadata": {
        "description": "Azure AD",
        "displayName": "Select the Azure AD linked to your Subscription"
      },
      "allowedValues": [
        "engie.onmicrosoft.com",
        "equans.onmicrosoft.com",
        "others"
      ],
      "defaultValue": "engie.onmicrosoft.com"
    },
    "containerInstanceOid": {
      "type": "string",
      "metadata": {
        "displayName": "Azure Container Instance Service Principal Object ID",
        "description": "For others tenants, enter the Object Id of Azure Container Instance Service Principal. We have to grant this permission to create hybrid connections in the Azure Relay you specify. To get it: Get-AzADServicePrincipal -DisplayNameBeginsWith 'Azure Container Instance'"
      }
    }
  },
  "variables": {
    "vnetName": "vnet",
    "vnetAddressPrefix": "192.168.0.0/24",
    "relayNamespaceName": "relay8978973112",
    "containerSubnetName": "container",
    "containerSubnetAddressPrefix": "192.168.0.0/26",
    "relaySubnetName": "relay",
    "relaySubnetAddressPrefix": "192.168.0.64/26",
    "storageSubnetName": "storage",
    "storageSubnetAddressPrefix": "192.168.0.128/25",
    "privateEndpointName": "privateEndpoint",
    "networkProfileName": "[format('aci-networkProfile-{0}', parameters('location'))]",
    "contributorRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
    "networkRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
    "privateDnsZoneName": "privatelink.servicebus.windows.net",
    "vnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
    "engieContainerInstanceOid": "17a1efbe-b43b-4848-851f-e94176e40e9a",
    "equansContainerInstanceOid": "",
    "ContainerInstanceOid": "[if(equals(parameters('AzureAdTenant'), 'engie.onmicrosoft.com'), variables('engieContainerInstanceOid'), if(equals(parameters('AzureAdTenant'), 'equans.onmicrosoft.com'), variables('equansContainerInstanceOid'), parameters('containerInstanceOid')))]",
    "containerSubnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('containerSubnetName'))]",
    "storageSubnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('storageSubnetName'))]",
    "storageAccountName": "shell98764567899"
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-06-01",
      "name": "[variables('vnetName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetAddressPrefix')]"
          ]
        }
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2020-04-01",
      "name": "[format('{0}/{1}', variables('vnetName'), variables('containerSubnetName'))]",
      "properties": {
        "addressPrefix": "[variables('containerSubnetAddressPrefix')]",
        "serviceEndpoints": [
          {
            "service": "Microsoft.Storage",
            "locations": [
              "[parameters('location')]"
            ]
          }
        ],
        "delegations": [
          {
            "name": "CloudShellDelegation",
            "properties": {
              "serviceName": "Microsoft.ContainerInstance/containerGroups"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkProfiles",
      "apiVersion": "2019-11-01",
      "name": "[variables('networkProfileName')]",
      "location": "[parameters('location')]",
      "properties": {
        "containerNetworkInterfaceConfigurations": [
          {
            "name": "[format('eth-{0}', variables('containerSubnetName'))]",
            "properties": {
              "ipConfigurations": [
                {
                  "name": "[format('ipconfig-{0}', variables('containerSubnetName'))]",
                  "properties": {
                    "subnet": {
                      "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('containerSubnetName'))]"
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('containerSubnetName'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-04-01-preview",
      "scope": "[format('Microsoft.Network/networkProfiles/{0}', variables('networkProfileName'))]",
      "name": "[guid(variables('networkRoleDefinitionId'), variables('containerInstanceOid'), variables('networkProfileName'))]",
      "properties": {
        "roleDefinitionId": "[variables('networkRoleDefinitionId')]",
        "principalId": "[variables('ContainerInstanceOid')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkProfiles', variables('networkProfileName'))]"
      ]
    },
    {
      "type": "Microsoft.Relay/namespaces",
      "apiVersion": "2018-01-01-preview",
      "name": "[variables('relayNamespaceName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard",
        "tier": "Standard"
      },
      "properties": {}
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-04-01-preview",
      "scope": "[format('Microsoft.Relay/namespaces/{0}', variables('relayNamespaceName'))]",
      "name": "[guid(variables('contributorRoleDefinitionId'), variables('ContainerInstanceOid'), variables('relayNamespaceName'))]",
      "properties": {
        "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
        "principalId": "[variables('ContainerInstanceOid')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Relay/namespaces', variables('relayNamespaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2020-04-01",
      "name": "[format('{0}/{1}', variables('vnetName'), variables('relaySubnetName'))]",
      "properties": {
        "addressPrefix": "[variables('relaySubnetAddressPrefix')]",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('containerSubnetName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2020-04-01",
      "name": "[variables('privateEndpointName')]",
      "location": "[parameters('location')]",
      "properties": {
        "privateLinkServiceConnections": [
          {
            "name": "[variables('privateEndpointName')]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Relay/namespaces', variables('relayNamespaceName'))]",
              "groupIds": [
                "namespace"
              ]
            }
          }
        ],
        "subnet": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('relaySubnetName'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Relay/namespaces', variables('relayNamespaceName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('relaySubnetName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2020-04-01",
      "name": "[format('{0}/{1}', variables('vnetName'), variables('storageSubnetName'))]",
      "properties": {
        "addressPrefix": "[variables('storageSubnetAddressPrefix')]",
        "serviceEndpoints": [
          {
            "service": "Microsoft.Storage",
            "locations": [
              "[parameters('location')]"
            ]
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('relaySubnetName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-01-01",
      "name": "[variables('privateDnsZoneName')]",
      "location": "global"
    },
    {
      "type": "Microsoft.Network/privateDnsZones/A",
      "apiVersion": "2020-01-01",
      "name": "[format('{0}/{1}', variables('privateDnsZoneName'), variables('relayNamespaceName'))]",
      "properties": {
        "ttl": 3600,
        "aRecords": [
          {
            "ipv4Address": "[first(first(reference(resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointName'))).customDnsConfigs).ipAddresses)]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneName'))]",
        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-01-01",
      "name": "[format('{0}/{1}', variables('privateDnsZoneName'), variables('relayNamespaceName'))]",
      "location": "global",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[variables('vnetResourceId')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneName'))]"
      ]
    },

    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('containerSubnetName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('storageSubnetName'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "networkAcls": {
          "bypass": "None",
          "virtualNetworkRules": [
            {
              "id": "[variables('containerSubnetRef')]",
              "action": "Allow"
            },
            {
              "id": "[variables('storageSubnetRef')]",
              "action": "Allow"
            }
          ],
          "defaultAction": "Deny"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Cool"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      }
    }
  ],
  "outputs": {}
}